import telebot
from telebot import types
import configparser
import header as h
import csv
import collections
import datetime

logger = h.logging.getLogger('bot')

SHOP_NAMES = [
    '–ú.–≤–∏–¥–µ–æ',
    '–≠–ª—å–¥–æ—Ä–∞–¥–æ',
    'DNS',
    'DNS –¢–µ—Ö–Ω–æ–ø–æ–∏–Ω—Ç',
    '–ú–¢–°',
    '–°–∏—Ç–∏–ª–∏–Ω–∫',
    'RBT.ru',
    '–û–Ω–ª–∞–π–Ω—Ç—Ä–µ–π–¥',
    '–°–≤—è–∑–Ω–æ–π',
    '–¢–µ—Ö–Ω–æ–°–∏—Ç–∏',
    '–ë–∏–ª–∞–π–Ω',
    '–ú–µ–≥–∞–§–æ–Ω',
    '–µ2–µ4',
    '–ù–û–£-–•–ê–£',
    're:Store',
    '–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω Samsung',
    '–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω Huawei',
    'Ozon',
    'Wildberries',
    'Sony Store',
    'Tmall',
]


def wrap_in_tag(tag, text):
    return '<{}>{}</{}>'.format(tag, text, tag)


def del_duplicates_in_pc_prod_list(elements):
    result = []
    for item in elements:
        if not result.count(item):
            result.append(item)
    return result


def find_all_versions_in_pc_prod_list(elements, brand_name, model_name, ram, rom, cur_price):
    result = []
    for item in elements:
        if item.brand_name == brand_name and \
                item.model_name == model_name and \
                item.ram == ram and \
                item.rom == rom and \
                item.cur_price == cur_price:
            result.append(item)

    return result


def find_all_shops_in_pc_prod_list(elements, shop):
    result = []
    for item in elements:
        if item.shop == shop:
            result.append(item)

    return result


class Bot:
    def __init__(self):
        self.config = configparser.ConfigParser()
        self.config.read('conf.ini', encoding="utf-8")
        self.chat_id = self.config['bot']['chat_id']
        self.ignore_brands = self.config['bot-ignore']['brands'].lower().split('\n')
        print(self.ignore_brands)
        self.bot = telebot.TeleBot(self.config['bot']['token'])
        self.pc_product_list = []

    # –û–±–µ—Ä—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ –≤ html —Ç–µ–≥–∏

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–∞
    def __format_text(self, version_list):
        # –°—Å—ã–ª–∫–∏
        shops_set = list(set(item.shop for item in version_list))
        print(shops_set)

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ–∑–∏—Ü–∏–π –ø–æ –º–∞–≥–∞–∑–∏–Ω—É –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ä–∞–∑–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
        hashtags = ''
        links_shop_list = []
        for shop in shops_set:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–≥–æ–≤ –º–∞–≥–∞–∑–∏–Ω–æ–≤
            hashtags += '#' + SHOP_NAMES[shop - 1] + ' '

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫
            urls = ''
            for item in version_list:
                if item.shop == shop:
                    urls += '<a href="{}">‚ñ∫ {}</a>\n'.format(item.url, item.color.title())  # ‚Üí ‚ñ∫ ‚óè ‚óã ‚Ä¢
            links_shop_list.append(urls)

        item = version_list[0]
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        full_name = item.category[0:-1].title() + ' ' + item.brand_name.title() + ' ' + item.model_name.title()
        text = wrap_in_tag('b', full_name) + '\n'
        # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        text += wrap_in_tag('b', item.ram) + '/' + wrap_in_tag('b', item.rom) + ' <b>Gb</b>\n\n'

        # –¶–µ–Ω–∞
        # text += '‚óè‚óè‚óè‚óã‚óã\n'

        text += 'üî•üî•üî•\n'
        s_price = '{0:,}'.format(item.cur_price).replace(',', ' ')
        text += '–í—ã–≥–æ–¥–Ω–∞—è —Ü–µ–Ω–∞: <b><i>{}</i></b>'.format(s_price) + ' ‚ÇΩ' + '\n'
        text += '<i>(–î–µ—à–µ–≤–ª–µ –Ω–∞ <i>{}</i></i> ‚ÇΩ<i>)</i>\n\n'.format(int(item.avg_actual_price - item.cur_price))

        # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –º–∏–Ω–∏–º—É–º
        if item.cur_price < item.hist_min_price:
            text += '–î–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ —è–≤–ª—è–µ—Ç—Å—è —Å–∞–º–æ–π –Ω–∏–∑–∫–æ–π –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è\n'
        else:
            date_time = datetime.datetime.strptime(item.hist_min_date, '%Y-%m-%d %H:%M:%S.%f').strftime('%d.%m.%Y')
            print('!!!! {}'.format(date_time))
            text += '<i>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –±—ã–ª–∞ <i>{}</i> ‚ÇΩ –≤ <b>{}</b> {}.</i>\n'.format(
                item.hist_min_price, SHOP_NAMES[item.hist_min_shop - 1], date_time)

        # –°—Å—ã–ª–∫–∏
        indx = 0
        for link_set in links_shop_list:
            text += '\n–ö—É–ø–∏—Ç—å –≤ <b><u>' + SHOP_NAMES[shops_set[indx] - 1] + '</u></b>:\n'
            text += link_set
            indx += 1

        # –¢–µ–≥ –±—Ä–µ–Ω–¥–∞
        text += '\n' + hashtags + '#' + item.brand_name

        return text

    # –û—Ç–∫—Ä—ã–≤–∞–µ—Ç csv —Ñ–∞–π–ª –∏, —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞, –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–∏
    def prepare_data_to_send(self):
        pass

    def get_data(self):
        with open(h.PRICE_CHANGES_PATH, 'r') as f:
            reader = csv.DictReader(f)
            for row in reader:
                self.pc_product_list.append(h.PriceChanges(
                    shop=int(row['–ú–∞–≥–∞–∑–∏–Ω']),
                    category=row['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'],
                    brand_name=row['–ë—Ä–µ–Ω–¥'],
                    model_name=row['–ú–æ–¥–µ–ª—å'],
                    color=row['–¶–≤–µ—Ç'],
                    ram=int(row['RAM']),
                    rom=int(row['ROM']),
                    img_url=row['–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'],
                    url=row['–°—Å—ã–ª–∫–∞'],
                    date_time=row['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è'],
                    cur_price=int(row['–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞']),
                    avg_actual_price=float(row['–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞']),
                    hist_min_price=int(row['–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –º–∏–Ω. —Ü–µ–Ω–∞']),
                    hist_min_shop=int(row['–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –º–∏–Ω. –º–∞–≥–∞–∑–∏–Ω']),
                    hist_min_date=row['–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –º–∏–Ω. –¥–∞—Ç–∞'],
                    diff_cur_avg=int(row['–†–∞–∑–Ω–∏—Ü–∞ —Ü–µ–Ω—ã –æ—Ç —Å—Ä–µ–¥–Ω–µ–π']),
                ))

        print(self.pc_product_list)
        print('-' * 100)

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö - —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç–∞
    def filtering_data(self):
        # –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã, –µ—Å–ª–∏ –∏–º–µ—é—Ç—Å—è
        self.pc_product_list = del_duplicates_in_pc_prod_list(self.pc_product_list)

        # –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä—ã, –µ—Å–ª–∏ –µ–≥–æ –±—Ä–µ–Ω–¥ –∏–º–µ–µ—Ç—Å—è –≤ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç–µ
        result = []
        for item in self.pc_product_list:
            if not self.ignore_brands.count(item.brand_name):
                result.append(item)

        self.pc_product_list = result

    def post_all(self):

        # –ü—Ä–æ—Ö–æ–¥ –ø–æ –≤—Å–µ–º—É —Å–ø–∏—Å–∫—É, –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ –≤–µ—Ä—Å–∏–∏ –∏ —Ü–≤–µ—Ç—É, –ø–æ—Å—Ç –≥—Ä—É–ø–ø—ã
        while self.pc_product_list:
            # –í–∑—è—Ç–∏–µ –≥—Ä—É–ø–ø—ã –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
            item = self.pc_product_list[0]
            version_list = find_all_versions_in_pc_prod_list(self.pc_product_list, item.brand_name, item.model_name,
                                                             item.ram, item.rom, item.cur_price)

            print('=' * 100)
            for item in version_list:
                print(item)

            self.send_post(version_list)

            # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤–∑—è—Ç–æ–π –≥—Ä—É–ø–ø—ã version_list
            for item in version_list:
                self.pc_product_list.remove(item)

    def send_post(self, version_list):

        item = version_list[0]
        text = self.__format_text(version_list)
        print(text)
        self.bot.send_photo(chat_id=self.chat_id, photo=item.img_url, caption=text, parse_mode='Html')

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    def run(self):
        self.get_data()
        self.filtering_data()
        self.post_all()

# @bot.message_handler(commands=['start'])
# def start_handler(message):
#     bot.send_message(message.from_user.id, start_mess)

# bot.polling(none_stop=True, interval=0)

# def send_post(text):
#     urls = types.InlineKeyboardMarkup(row_width=1)
#     url_1 = types.InlineKeyboardButton(text='–ß–µ—Ä–Ω—ã–π', url='yandex.ru')
#     url_2 = types.InlineKeyboardButton(text='–ö—Ä–∞—Å–Ω—ã–π', url='yandex.ru')
#     url_3 = types.InlineKeyboardButton(text='–ë–µ–ª—ã–π', url='yandex.ru')
#     urls.add(url_1, url_2, url_3)
#     bot.send_photo(chat_id=CHAT_ID, photo='https://c.dns-shop.ru/thumb/st4/fit/200/200/03fbdbd83838fd1e6774a7efeee109a9/a05ad1ff1f69afcfc2b83579e8775712ae86aa15d428d0285637bd7a859bcbfd.jpg', caption=text1, parse_mode='Html', reply_markup=urls)

# bot.send_message(chat_id=CHAT_ID, text=text, reply_markup=urls, parse_mode='Html')
# bot.send_message(chat_id=CHAT_ID, text=text2, parse_mode='Markdown')


# def start():
#     key = types.InlineKeyboardMarkup()
#     key_1 = types.InlineKeyboardButton(text='123', callback_data='123')
#     key_2 = types.InlineKeyboardButton(text='yandex', url='yandex.ru')
#     key.add(key_1)
#     key.add(key_2)
#     bot.send_message(CHAT_ID, 'test text', reply_markup=key)
#
#
# @bot.callback_query_handler(func=lambda call: True)
# def callback_inline(call):
#     if call.data == '123':
#         print('–Ω–∞–∂–∞–ª–∏ 123 –≤ –∫–∞–Ω–∞–ª–µ')


# def fun():
#     text = 'CI Test Message'
#     markup = types.InlineKeyboardMarkup()
#     itembtn1 = types.InlineKeyboardButton('a')
#     itembtn2 = types.InlineKeyboardButton('v')
#     itembtn3 = types.InlineKeyboardButton('d')
#     markup.add(itembtn1, itembtn2, itembtn3)
#     bot.send_message(CHAT_ID, "Choose one letter:", reply_markup=markup)
#     # ret_msg = bot.send_message(chat_id=CHAT_ID, text=markdown, reply_markup=markup)


# bot.send_message(chat_id=CHAT_ID, text=markdown, parse_mode="Markdown")

# send_post(text1)

# bot.polling(none_stop=True, interval=0)
# https://api.telegram.org/bot1210851644:AAH4hHnJVtzdCSoT6qOBkXjgtLssysqQnPE/sendMessage?chat_id=-1001227686108&text=123
# {"ok":true,"result":{"message_id":8,"chat":{"id":-1001227686108,"title":"\u041f\u0440\u043e\u0434\u0430\u0432\u0430\u0447","username":"adfrews","type":"channel"},"date":1604056040,"text":"123"}}


# config1 = configparser.ConfigParser() # empty_lines_in_values=False
# config1.read("conf.ini")

# print(config1["bot-ignore"]["brand"])

#
#
# bot = Bot()
# bot.send_post("samsung", "note 10 ultra", 59999, "dns",
#               "https://c.dns-shop.ru/thumb/st4/fit/200/200/03fbdbd83838fd1e6774a7efeee109a9/a05ad1ff1f69afcfc2b83579e8775712ae86aa15d428d0285637bd7a859bcbfd.jpg")
