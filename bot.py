import telebot
from telebot import types
import configparser
import header as h
import csv
import datetime
import requests
import time
from PIL import Image, ImageDraw
import re

logger = h.logging.getLogger('bot')
EXCEPT_MODEL_NAMES_TELEGRAM_DICT = {}
STATS_PRODS_DICT = {}
STATS_SHOPS_DICT = {}


# –ß—Ç–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è —Å –ø–æ–¥—Å—á–µ—Ç–æ–º –∫–æ–ª-–≤–∞ –º–æ–¥–µ–ª–µ–π
def load_stats_prods_dictionary():
    # –°–ª–æ–≤–∞—Ä—å —Ü–≤–µ—Ç–æ–≤
    with open(h.STATS_PRODS_DICTIONARY_PATH, 'r', encoding='UTF-8') as f:
        for line in f:
            res = re.findall(r"\[.+?]", line)
            # –û—Ç—Å–µ—á—å –∫—Ä–∏–≤—ã–µ –∑–∞–ø–∏—Å–∏
            if len(res) != 2:
                continue
            # –î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å
            STATS_PRODS_DICT[res[0].replace('[', '').replace(']', '')] = \
                int(res[1].replace('[', '').replace(']', ''))


# –ß—Ç–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è —Å –ø–æ–¥—Å—á–µ—Ç–æ–º –∫–æ–ª-–≤–∞ –º–æ–¥–µ–ª–µ–π
def load_stats_shops_dictionary():
    # –°–ª–æ–≤–∞—Ä—å —Ü–≤–µ—Ç–æ–≤
    with open(h.STATS_SHOPS_DICTIONARY_PATH, 'r', encoding='UTF-8') as f:
        for line in f:
            res = re.findall(r"\[.+?]", line)
            # –û—Ç—Å–µ—á—å –∫—Ä–∏–≤—ã–µ –∑–∞–ø–∏—Å–∏
            if len(res) != 2:
                continue
            # –î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å
            STATS_SHOPS_DICT[res[0].replace('[', '').replace(']', '')] = \
                int(res[1].replace('[', '').replace(']', ''))


# –ß—Ç–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π –Ω–∞–∑–≤–∞–Ω–∏–π –º–æ–¥–µ–ª–µ–π
def load_exceptions_model_names_telegram():
    with open(h.EXCEPT_MODEL_NAMES_TELEGRAM_PATH, 'r', encoding='UTF-8') as f:
        for line in f:
            res = re.findall(r"\[.+?]", line)
            # –û—Ç—Å–µ—á—å –∫—Ä–∏–≤—ã–µ –∑–∞–ø–∏—Å–∏
            if len(res) != 2:
                continue
            # –î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å
            EXCEPT_MODEL_NAMES_TELEGRAM_DICT[res[0].replace('[', '').replace(']', '')] = \
                res[1].replace('[', '').replace(']', '')


# –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞ –¥–∏—Å–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
def save_stats_prods_dictionary():
    with open(h.STATS_PRODS_DICTIONARY_PATH, 'w', encoding='UTF-8') as f:
        for key, val in STATS_PRODS_DICT.items():
            f.write('[{}] -> [{}]\n'.format(key, val))


# –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞ –¥–∏—Å–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤
def save_stats_shops_dictionary():
    with open(h.STATS_SHOPS_DICTIONARY_PATH, 'w', encoding='UTF-8') as f:
        for key, val in STATS_SHOPS_DICT.items():
            f.write('[{}] -> [{}]\n'.format(key, val))


# –ü–æ–∏—Å–∫ –≤ —Å—Ç—Ä–æ–∫–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ—Ä–∞–∑ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏ –∏—Ö –∑–∞–º–µ–Ω–∞
def find_and_replace_except_model_name(model_name):
    # –ü–æ–∏—Å–∫: –µ—Å—Ç—å –ª–∏ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤ —Å—Ç—Ä–æ–∫–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    res = re.findall(r'|'.join(EXCEPT_MODEL_NAMES_TELEGRAM_DICT.keys()), model_name)
    # –ï—Å–ª–∏ –µ—Å—Ç—å - –ø–æ–¥–º–µ–Ω—è–µ–º
    if res:
        res = res[0]
        model_name = model_name.replace(res, EXCEPT_MODEL_NAMES_TELEGRAM_DICT.get(res))

    return model_name


# –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–æ–ª–æ—Ç–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤—Å—Ç–∞–≤–∫–∞ –≤ —Å–µ—Ä–µ–¥–∏–Ω—É –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è –ø–æ—Å—Ç–∞
def image_change(url):
    W, H = 640, 480

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ URL
    if not ("http" in url):
        logger.warning("–î–µ—Ñ–µ–∫—Ç–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {}".format(url))
        return None

    # –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å url
    try:
        resp = requests.get(url, stream=True).raw
    except requests.exceptions.RequestException as e:
        logger.error("Can't get img from url :(, url={}\ne = {}".format(url, e))
        return None

    # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏ PIL
    try:
        img = Image.open(resp)
    except IOError:
        logger.error("Unable to open image")
        return None

    # –ï—Å–ª–∏ –≤—ã—Å–æ—Ç–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç H - –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
    if img.height != H:
        width, height = img.size
        new_height = H
        new_width = int(new_height * width / height)
        img = img.resize((new_width, new_height), Image.ANTIALIAS)

    im = Image.new('RGB', (W, H), color='#FFFFFF')
    im.paste(img, (int((W - img.width) / 2), 0), 0)

    return im


# –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Ñ–∞–π–ª–∞ (–¥–ª—è —Ç–µ—Å—Ç–∞)
def get_data():
    result_list = []
    with open(h.PRICE_CHANGES_PATH, 'r') as f:
        reader = csv.DictReader(f)
        for row in reader:
            result_list.append(h.PriceChanges(
                shop=int(row['–ú–∞–≥–∞–∑–∏–Ω']),
                category=row['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'],
                brand_name=row['–ë—Ä–µ–Ω–¥'],
                model_name=row['–ú–æ–¥–µ–ª—å'],
                color=row['–¶–≤–µ—Ç'],
                ram=int(row['RAM']),
                rom=int(row['ROM']),
                img_url=row['–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'],
                url=row['–°—Å—ã–ª–∫–∞'],
                date_time=row['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è'],
                cur_price=int(row['–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞']),
                avg_actual_price=float(row['–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞']),
                hist_min_price=int(row['–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –º–∏–Ω. —Ü–µ–Ω–∞']),
                hist_min_shop=int(row['–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –º–∏–Ω. –º–∞–≥–∞–∑–∏–Ω']),
                hist_min_date=row['–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –º–∏–Ω. –¥–∞—Ç–∞'],
                diff_cur_avg=int(row['–†–∞–∑–Ω–∏—Ü–∞ —Ü–µ–Ω—ã –æ—Ç —Å—Ä–µ–¥–Ω–µ–π']),
            ))

    return result_list


class Bot:
    def __init__(self):
        self.config = configparser.ConfigParser()
        self.config.read('conf.ini', encoding="utf-8")
        self.chat_id = self.config['bot']['chat_id']
        self.ignore_brands = self.config['bot-ignore']['brands'].lower().split('\n')
        self.bot = telebot.TeleBot(self.config['bot']['token'])
        self.one_star_per = float(self.config['bot-stars']['one_star_per'])
        self.two_star_per = float(self.config['bot-stars']['two_star_per'])
        self.three_star_per = float(self.config['bot-stars']['three_star_per'])
        self.four_star_per = float(self.config['bot-stars']['four_star_per'])
        self.five_star_per = float(self.config['bot-stars']['five_star_per'])
        self.pc_product_list = []
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤–∞—Ä—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π –Ω–∞–∑–≤–∞–Ω–∏–π –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø–æ—Å—Ç–æ–≤
        load_exceptions_model_names_telegram()
        load_stats_prods_dictionary()
        load_stats_shops_dictionary()

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–∞
    def __format_text(self, version_list):
        product = version_list[0]
        # –ù–ê–ó–í–ê–ù–ò–ï –ú–û–î–ï–õ–ò —Å —É—á–µ—Ç–æ–º —Å–ª–æ–≤–∞—Ä—è —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏ –Ω–∞–∑–≤–∞–Ω–∏–π
        text = find_and_replace_except_model_name('<b>{} {} {}</b>\n'.format(
            product.category[0:-1].title(), product.brand_name.title(), product.model_name.title()))

        # –ö–û–ú–ü–õ–ï–ö–¢–ê–¶–ò–Ø
        text += '<b>{}/{} GB</b>\n\n'.format(product.ram, product.rom) if product.ram \
            else '<b>{} GB</b>\n\n'.format(product.rom)

        # –û–ì–û–ù–¨–ö–ò
        per = float(100 - product.cur_price / product.avg_actual_price * 100)
        star = 0
        if self.one_star_per <= per < self.two_star_per:
            star = 1
        if self.two_star_per <= per < self.three_star_per:
            star = 2
        if self.three_star_per <= per < self.four_star_per:
            star = 3
        if self.four_star_per <= per < self.five_star_per:
            star = 4
        if self.five_star_per < per:
            star = 5

        logger.info("{} –ó–í–ï–ó–î(–´)".format(star))
        text += 'üî•' * star
        text += '\n'

        # –¶–ï–ù–ê
        # text += '‚≠ê‚≠ê‚≠ê\n'
        # text += 'üç™üç™üç™\n'
        # text += 'üëëüëëüëë\n'
        # text += 'üíéüíéüíé\n'
        # text += 'üí•üí•üí•\n'
        # text += 'üåûüåûüåû\n'
        # text += 'üî¥üî¥üî¥\n'
        # text += 'üö©üö©üö©\n'
        s_price = '{0:,}'.format(product.cur_price).replace(',', ' ')
        text += '–í—ã–≥–æ–¥–Ω–∞—è —Ü–µ–Ω–∞: <b><i>{}</i></b> ‚ÇΩ\n'.format(s_price)
        s_price = '{0:,}'.format(int(product.avg_actual_price - product.cur_price))
        text += '<i>(–î–µ—à–µ–≤–ª–µ –Ω–∞ {}</i> ‚ÇΩ<i> –æ—Ç —Å—Ä–µ–¥–Ω–µ–π)</i>\n\n'.format(s_price).replace(',', ' ')

        # –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ô –ú–ò–ù–ò–ú–£–ú
        if product.cur_price <= product.hist_min_price:
            text += '<i>–î–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ —è–≤–ª—è–µ—Ç—Å—è —Å–∞–º–æ–π –Ω–∏–∑–∫–æ–π –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è</i>\n'
        else:
            date_time = datetime.datetime.strptime(str(product.hist_min_date), '%Y-%m-%d %H:%M:%S.%f').strftime(
                '%d.%m.%Y')
            s_price = '{0:,}'.format(product.hist_min_price).replace(',', ' ')
            text += '<i>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ {}</i> ‚ÇΩ <i>–±—ã–ª–∞ {} –≤ {}</i>\n'.format(
                s_price, h.TRUE_SHOP_NAMES[product.hist_min_shop - 1], date_time)

        # –°–ü–ò–°–û–ö –°–°–´–õ–û–ö –î–õ–Ø –ü–û–ö–£–ü–ö–ò
        shops_set = list(set(item.shop for item in version_list))

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ–∑–∏—Ü–∏–π –ø–æ –º–∞–≥–∞–∑–∏–Ω—É –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ä–∞–∑–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
        hashtag_shops = ''
        links_shop_list = []
        for shop in shops_set:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–≥–æ–≤ –º–∞–≥–∞–∑–∏–Ω–æ–≤
            hashtag_shops += '#' + h.SHOPS_NAME_LIST[shop - 1][0] + ' '

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫
            urls = ''
            for product in version_list:
                if product.shop == shop:
                    urls += '<a href="{}">‚ñ∫ {}</a>\n'.format(product.url, product.color.title())  # ‚Üí ‚ñ∫ ‚óè ‚óã ‚Ä¢ ‚Ä∫
            links_shop_list.append(urls)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫
        indx = 0
        for link_set in links_shop_list:
            text += '\n–ö—É–ø–∏—Ç—å –≤ <b><u>{}</u></b>:\n'.format(h.TRUE_SHOP_NAMES[shops_set[indx] - 1])
            text += link_set
            indx += 1

        # –•–≠–®–¢–ï–ì–ò
        text += '\n' + '#' + product.brand_name + ' ' + hashtag_shops

        return text

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö - —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç–∞
    def __filtering_data(self):
        # –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã, –µ—Å–ª–∏ –∏–º–µ—é—Ç—Å—è
        result = []
        for item in self.pc_product_list:
            if not result.count(item):
                result.append(item)
        self.pc_product_list = result

        # –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä—ã, –µ—Å–ª–∏ –µ–≥–æ –±—Ä–µ–Ω–¥ –∏–º–µ–µ—Ç—Å—è –≤ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç–µ
        result = []
        for item in self.pc_product_list:
            if not self.ignore_brands.count(item.brand_name):
                result.append(item)
        self.pc_product_list = result

    # –†–∞–∑–±–æ—Ä —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–≤–µ—Ç–∞–º, –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
    def __prepare_posts_and_send(self):
        versions_list = []
        # –ü—Ä–æ—Ö–æ–¥ –ø–æ –≤—Å–µ–º—É —Å–ø–∏—Å–∫—É, –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ –≤–µ—Ä—Å–∏–∏ –∏ —Ü–≤–µ—Ç—É, –ø–æ—Å—Ç –≥—Ä—É–ø–ø—ã
        while self.pc_product_list:
            # –í–∑—è—Ç–∏–µ –≥—Ä—É–ø–ø—ã –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
            item = self.pc_product_list[0]
            one_version_list = h.find_in_namedtuple_list(self.pc_product_list, brand_name=item.brand_name,
                                                         model_name=item.model_name, ram=item.ram, rom=item.rom,
                                                         cur_price=item.cur_price)
            # –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π
            versions_list.append(one_version_list)
            # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤–∑—è—Ç–æ–π –≥—Ä—É–ø–ø—ã one_version_list
            for item in one_version_list:
                self.pc_product_list.remove(item)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–æ–≤ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º. –ó–≤—É–∫ —Ç–æ–ª—å–∫–æ —É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 2-—É—Ö
        for i in range(len(versions_list)):
            self.__send_post(versions_list[i], True if (i < (len(versions_list) - 2)) else False)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
    def __send_post(self, version_list, dis_notify):
        item = version_list[0]
        text = self.__format_text(version_list)
        img = image_change(item.img_url)
        if not img:
            logger.error("No IMG in send post")
            return

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
        full_name = "{} {}".format(item.brand_name, item.model_name)
        if full_name in STATS_PRODS_DICT:
            STATS_PRODS_DICT[full_name] += 1
        else:
            STATS_PRODS_DICT[full_name] = 1

        shop_name = h.SHOPS_NAME_LIST[item.shop - 1][0]
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤
        if shop_name in STATS_SHOPS_DICT:
            STATS_SHOPS_DICT[shop_name] += 1
        else:
            STATS_SHOPS_DICT[shop_name] = 1

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –≤ –æ–±–µ—Ä—Ç–∫–µ
        for i in range(3):
            try:
                self.bot.send_photo(chat_id=self.chat_id, photo=img, caption=text, parse_mode='Html',
                                    disable_notification=dis_notify)
                break
            except telebot.apihelper.ApiException:
                logger.warning("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ—Å—Ç–æ–≤ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º, –æ–∂–∏–¥–∞–µ–º 30 —Å–µ–∫, ({})".format(i + 1))
                time.sleep(30)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    def run(self, pc_product_list):
        # pc_product_list = get_data()
        if not pc_product_list:
            logger.info("–ù–ï–¢ –î–ê–ù–ù–´–• –î–õ–Ø TELEGRAM")
            return
        self.pc_product_list = pc_product_list
        self.__filtering_data()
        self.__prepare_posts_and_send()
        save_stats_prods_dictionary()
        save_stats_shops_dictionary()

# bot = Bot()
# bot.run([])
